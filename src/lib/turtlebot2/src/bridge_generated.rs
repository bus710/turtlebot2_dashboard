#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_available_tutlebots(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "available_tutlebots",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| available_tutlebots(),
    )
}

#[no_mangle]
pub extern "C" fn wire_spawn_turtlebot(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "spawn_turtlebot",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| spawn_turtlebot(task_callback.stream_sink()),
    )
}

#[no_mangle]
pub extern "C" fn wire_send_to_turtlebot(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_to_turtlebot",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| send_to_turtlebot(),
    )
}

#[no_mangle]
pub extern "C" fn wire_receive_from_turtlebot(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "receive_from_turtlebot",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| receive_from_turtlebot(),
    )
}

// Section: wire structs

// Section: wire enums

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

// Section: impl IntoDart

impl support::IntoDart for BasicSensor {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.time_stamp.into_dart(),
            self.bumper.into_dart(),
            self.wheel_drop.into_dart(),
            self.cliff.into_dart(),
            self.left_encoder.into_dart(),
            self.right_encoder.into_dart(),
            self.left_pwm.into_dart(),
            self.right_pwm.into_dart(),
            self.button.into_dart(),
            self.charger.into_dart(),
            self.battery.into_dart(),
            self.overcurrent_flags.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BasicSensor {}

impl support::IntoDart for Cliff {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.right_cliff_sensor.into_dart(),
            self.central_cliff_sensor.into_dart(),
            self.left_cliff_sensor.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Cliff {}

impl support::IntoDart for ControllerInfo {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.is_user_configured.into_dart(),
            self.p_gain.into_dart(),
            self.i_gain.into_dart(),
            self.d_gain.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ControllerInfo {}

impl support::IntoDart for Current {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.left_motor.into_dart(),
            self.right_motor.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Current {}

impl support::IntoDart for DockingIR {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.right_signal.into_dart(),
            self.central_signal.into_dart(),
            self.left_signal.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DockingIR {}

impl support::IntoDart for Feedback {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.epoch_time_stamp.into_dart(),
            self.basic_sensor.into_dart(),
            self.docking_ir.into_dart(),
            self.inertial_sensor.into_dart(),
            self.cliff.into_dart(),
            self.current.into_dart(),
            self.hardware_version.into_dart(),
            self.firmware_version.into_dart(),
            self.gyro.into_dart(),
            self.general_purpose_input.into_dart(),
            self.unique_device_id.into_dart(),
            self.controller_info.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Feedback {}

impl support::IntoDart for FirmwareVersion {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.patch.into_dart(),
            self.minor.into_dart(),
            self.major.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FirmwareVersion {}

impl support::IntoDart for GeneralPurposeInput {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.d_ch0.into_dart(),
            self.a_ch0.into_dart(),
            self.a_ch1.into_dart(),
            self.a_ch2.into_dart(),
            self.a_ch3.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GeneralPurposeInput {}

impl support::IntoDart for Gyro {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.frame_id.into_dart(),
            self.followed_data_length.into_dart(),
            self.x0.into_dart(),
            self.y0.into_dart(),
            self.z0.into_dart(),
            self.x1.into_dart(),
            self.y1.into_dart(),
            self.z1.into_dart(),
            self.x2.into_dart(),
            self.y2.into_dart(),
            self.z2.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Gyro {}

impl support::IntoDart for HardwareVersion {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.patch.into_dart(),
            self.minor.into_dart(),
            self.major.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for HardwareVersion {}

impl support::IntoDart for InertialSensor {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.angle.into_dart(),
            self.angle_rate.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for InertialSensor {}

impl support::IntoDart for UniqueDeviceId {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.valid.into_dart(),
            self.udid0.into_dart(),
            self.udid1.into_dart(),
            self.udid2.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UniqueDeviceId {}

// Section: executor
support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
